/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package trabalhografos.ui;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import service.*;
import model.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.*;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author thiag
 */
public class Ui extends javax.swing.JFrame {
    public String path;
    public MeusAlgoritmosEmGrafos meusAlgoritmosEmGrafos;
    public MeuGrafo grafo;
    /**
     * Creates new form Ui
     */
    public Ui() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(51, 51, 51));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb_title = new javax.swing.JLabel();
        lb_selecionar_arquvio_entrada = new javax.swing.JLabel();
        btn_selecionar = new javax.swing.JButton();
        btn_carregar_grafo = new javax.swing.JButton();
        lb_selecionar_algoritmo = new javax.swing.JLabel();
        cbx_algoritmo = new javax.swing.JComboBox<>();
        btn_executar_algoritmo = new javax.swing.JButton();
        lb_selecionar_algoritmo1 = new javax.swing.JLabel();
        cbx_estrutura = new javax.swing.JComboBox<>();
        lb_arquivo = new javax.swing.JLabel();
        jtxt_arquivo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtb_estrutura = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_estrutura.setShowGrid(true); // Mostra a grade
        jtb_estrutura.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_estrutura.setRowHeight(30); // Defina a altura que você desejar

        jScrollPane3 = new javax.swing.JScrollPane();
        jtb_arestas = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_arestas.setShowGrid(true); // Mostra a grade
        jtb_arestas.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_arestas.setRowHeight(30); // Defina a altura que você desejar

        lb_estrutura = new javax.swing.JLabel();
        lb_arestasAGM1 = new javax.swing.JLabel();
        lb_vertices = new javax.swing.JLabel();
        lb_descoberta = new javax.swing.JLabel();
        lb_finalizacao = new javax.swing.JLabel();
        lb_finalizacao1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jtb_descoberta = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_descoberta.setShowGrid(true); // Mostra a grade
        jtb_descoberta.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_descoberta.setRowHeight(30); // Defina a altura que você desejar

        jScrollPane5 = new javax.swing.JScrollPane();
        jtb_vertices = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_vertices.setShowGrid(true); // Mostra a grade
        jtb_vertices.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_vertices.setRowHeight(30); // Defina a altura que você desejar

        jScrollPane6 = new javax.swing.JScrollPane();
        jtb_finalizacao = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_finalizacao.setShowGrid(true); // Mostra a grade
        jtb_finalizacao.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_finalizacao.setRowHeight(30); // Defina a altura que você desejar

        jScrollPane7 = new javax.swing.JScrollPane();
        jtb_pai = new javax.swing.JTable();
        // Ativa a grade de linhas e colunas
        jtb_pai.setShowGrid(true); // Mostra a grade
        jtb_pai.setGridColor(Color.GRAY); // Define a cor da grade
        // Aumenta a altura das linhas
        jtb_pai.setRowHeight(30); // Defina a altura que você desejar

        lb_fm = new javax.swing.JLabel();
        jtxt_fm = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Trabalho Algoritmos Grafos");

        lb_title.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        lb_title.setForeground(new java.awt.Color(204, 255, 255));
        lb_title.setText("Trabalho Algoritmos Em Grafos");

        lb_selecionar_arquvio_entrada.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_selecionar_arquvio_entrada.setForeground(new java.awt.Color(255, 255, 255));
        lb_selecionar_arquvio_entrada.setText("Selecionar Arquivo de Entrada:");

        btn_selecionar.setBackground(new java.awt.Color(0, 102, 102));
        btn_selecionar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_selecionar.setForeground(new java.awt.Color(204, 204, 255));
        btn_selecionar.setText("Selecionar");
        btn_selecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_selecionarActionPerformed(evt);
            }
        });

        btn_carregar_grafo.setBackground(new java.awt.Color(0, 0, 102));
        btn_carregar_grafo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_carregar_grafo.setForeground(new java.awt.Color(255, 255, 204));
        btn_carregar_grafo.setText("Carregar Grafo");
        btn_carregar_grafo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_carregar_grafoActionPerformed(evt);
            }
        });

        lb_selecionar_algoritmo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_selecionar_algoritmo.setForeground(new java.awt.Color(255, 255, 255));
        lb_selecionar_algoritmo.setText("Selecionar Algoritmo a ser Executado:");

        cbx_algoritmo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Busca em Profundidade", "Busca em Largura", "Árvore Geradora Mínima", "Caminho Mínimo", "Fluxo Máximo" }));

        btn_executar_algoritmo.setBackground(new java.awt.Color(153, 0, 0));
        btn_executar_algoritmo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btn_executar_algoritmo.setForeground(new java.awt.Color(255, 255, 255));
        btn_executar_algoritmo.setText("Executar");
        btn_executar_algoritmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_executar_algoritmoActionPerformed(evt);
            }
        });

        lb_selecionar_algoritmo1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_selecionar_algoritmo1.setForeground(new java.awt.Color(255, 255, 255));
        lb_selecionar_algoritmo1.setText("Selecionar Estrutura de Representação:");

        cbx_estrutura.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Matriz Adjacência", "Matriz Incidência", "Lista Adjacência" }));

        lb_arquivo.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_arquivo.setForeground(new java.awt.Color(255, 255, 255));
        lb_arquivo.setText("Arquivo:");

        jtxt_arquivo.setEditable(false);
        jtxt_arquivo.setBackground(new java.awt.Color(102, 102, 102));
        jtxt_arquivo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtxt_arquivo.setForeground(new java.awt.Color(255, 255, 255));
        jtxt_arquivo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_arquivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxt_arquivoActionPerformed(evt);
            }
        });

        jtb_estrutura.setBackground(new java.awt.Color(153, 255, 204));
        jtb_estrutura.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_estrutura.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_estrutura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_estrutura.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        DefaultTableCellRenderer centralizado = new DefaultTableCellRenderer();
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_estrutura.getColumnCount(); i++) {
            jtb_estrutura.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoEstrutura = (DefaultTableCellRenderer) jtb_estrutura.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoEstrutura.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane2.setViewportView(jtb_estrutura);
        if (jtb_estrutura.getColumnModel().getColumnCount() > 0) {
            jtb_estrutura.getColumnModel().getColumn(0).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(1).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(2).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(3).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(4).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(5).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(6).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(7).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(8).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(9).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(10).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(11).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(12).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(13).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(14).setResizable(false);
            jtb_estrutura.getColumnModel().getColumn(15).setResizable(false);
        }

        jtb_arestas.setBackground(new java.awt.Color(255, 255, 204));
        jtb_arestas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_arestas.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_arestas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Aresta", "Origem", "Destino", "Peso", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_arestas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_arestas.getColumnCount(); i++) {
            jtb_arestas.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoArestas = (DefaultTableCellRenderer) jtb_arestas.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoArestas.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane3.setViewportView(jtb_arestas);
        if (jtb_arestas.getColumnModel().getColumnCount() > 0) {
            jtb_arestas.getColumnModel().getColumn(0).setResizable(false);
            jtb_arestas.getColumnModel().getColumn(1).setResizable(false);
            jtb_arestas.getColumnModel().getColumn(2).setResizable(false);
            jtb_arestas.getColumnModel().getColumn(3).setResizable(false);
            jtb_arestas.getColumnModel().getColumn(4).setResizable(false);
        }

        lb_estrutura.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        lb_estrutura.setForeground(new java.awt.Color(255, 255, 255));
        lb_estrutura.setText("Estrutura de Representação do Grafo");

        lb_arestasAGM1.setFont(new java.awt.Font("Arial", 0, 16)); // NOI18N
        lb_arestasAGM1.setForeground(new java.awt.Color(255, 255, 255));
        lb_arestasAGM1.setText("Arestas da Árvore Geradora Mínima / Busca em Profundidade");

        lb_vertices.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_vertices.setForeground(new java.awt.Color(255, 255, 255));
        lb_vertices.setText("Vértices: ");

        lb_descoberta.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_descoberta.setForeground(new java.awt.Color(255, 255, 255));
        lb_descoberta.setText("Descoberta:");

        lb_finalizacao.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_finalizacao.setForeground(new java.awt.Color(255, 255, 255));
        lb_finalizacao.setText("Finalização:");

        lb_finalizacao1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_finalizacao1.setForeground(new java.awt.Color(255, 255, 255));
        lb_finalizacao1.setText("Pai:");

        jtb_descoberta.setBackground(new java.awt.Color(255, 204, 153));
        jtb_descoberta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_descoberta.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_descoberta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_descoberta.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_descoberta.getColumnCount(); i++) {
            jtb_descoberta.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoDescoberta = (DefaultTableCellRenderer) jtb_descoberta.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoDescoberta.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane4.setViewportView(jtb_descoberta);
        if (jtb_descoberta.getColumnModel().getColumnCount() > 0) {
            jtb_descoberta.getColumnModel().getColumn(0).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(1).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(2).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(3).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(4).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(5).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(6).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(7).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(8).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(9).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(10).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(11).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(12).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(13).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(14).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(15).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(16).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(17).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(18).setResizable(false);
            jtb_descoberta.getColumnModel().getColumn(19).setResizable(false);
        }

        jtb_vertices.setBackground(new java.awt.Color(204, 204, 255));
        jtb_vertices.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_vertices.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_vertices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_vertices.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_vertices.getColumnCount(); i++) {
            jtb_vertices.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoVertices = (DefaultTableCellRenderer) jtb_vertices.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoVertices.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane5.setViewportView(jtb_vertices);
        if (jtb_vertices.getColumnModel().getColumnCount() > 0) {
            jtb_vertices.getColumnModel().getColumn(0).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(1).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(2).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(3).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(4).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(5).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(6).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(7).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(8).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(9).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(10).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(11).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(12).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(13).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(14).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(15).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(16).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(17).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(18).setResizable(false);
            jtb_vertices.getColumnModel().getColumn(19).setResizable(false);
        }

        jtb_finalizacao.setBackground(new java.awt.Color(204, 255, 204));
        jtb_finalizacao.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_finalizacao.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_finalizacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_finalizacao.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_finalizacao.getColumnCount(); i++) {
            jtb_finalizacao.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoFinalizacao = (DefaultTableCellRenderer) jtb_finalizacao.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoFinalizacao.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane6.setViewportView(jtb_finalizacao);
        if (jtb_finalizacao.getColumnModel().getColumnCount() > 0) {
            jtb_finalizacao.getColumnModel().getColumn(0).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(1).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(2).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(3).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(4).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(5).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(6).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(7).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(8).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(9).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(10).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(11).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(12).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(13).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(14).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(15).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(16).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(17).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(18).setResizable(false);
            jtb_finalizacao.getColumnModel().getColumn(19).setResizable(false);
        }

        jtb_pai.setBackground(new java.awt.Color(255, 204, 204));
        jtb_pai.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jtb_pai.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtb_pai.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtb_pai.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        // Centraliza os elementos nas células
        centralizado.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza horizontalmente
        centralizado.setVerticalAlignment(SwingConstants.CENTER); // Centraliza verticalmente

        // Aplica o renderizador de células centralizado para todas as colunas
        for (int i = 0; i < jtb_pai.getColumnCount(); i++) {
            jtb_pai.getColumnModel().getColumn(i).setCellRenderer(centralizado);
        }
        // Centraliza o cabeçalho das colunas
        DefaultTableCellRenderer centralizarCabecalhoPai = (DefaultTableCellRenderer) jtb_pai.getTableHeader().getDefaultRenderer();
        centralizarCabecalhoPai.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o cabeçalho
        jScrollPane7.setViewportView(jtb_pai);
        if (jtb_pai.getColumnModel().getColumnCount() > 0) {
            jtb_pai.getColumnModel().getColumn(0).setResizable(false);
            jtb_pai.getColumnModel().getColumn(1).setResizable(false);
            jtb_pai.getColumnModel().getColumn(2).setResizable(false);
            jtb_pai.getColumnModel().getColumn(3).setResizable(false);
            jtb_pai.getColumnModel().getColumn(4).setResizable(false);
            jtb_pai.getColumnModel().getColumn(5).setResizable(false);
            jtb_pai.getColumnModel().getColumn(6).setResizable(false);
            jtb_pai.getColumnModel().getColumn(7).setResizable(false);
            jtb_pai.getColumnModel().getColumn(8).setResizable(false);
            jtb_pai.getColumnModel().getColumn(9).setResizable(false);
            jtb_pai.getColumnModel().getColumn(10).setResizable(false);
            jtb_pai.getColumnModel().getColumn(11).setResizable(false);
            jtb_pai.getColumnModel().getColumn(12).setResizable(false);
            jtb_pai.getColumnModel().getColumn(13).setResizable(false);
            jtb_pai.getColumnModel().getColumn(14).setResizable(false);
            jtb_pai.getColumnModel().getColumn(15).setResizable(false);
            jtb_pai.getColumnModel().getColumn(16).setResizable(false);
            jtb_pai.getColumnModel().getColumn(17).setResizable(false);
            jtb_pai.getColumnModel().getColumn(18).setResizable(false);
            jtb_pai.getColumnModel().getColumn(19).setResizable(false);
        }

        lb_fm.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        lb_fm.setForeground(new java.awt.Color(255, 255, 255));
        lb_fm.setText("Fluxo Máximo:");

        jtxt_fm.setEditable(false);
        jtxt_fm.setBackground(new java.awt.Color(102, 102, 0));
        jtxt_fm.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jtxt_fm.setForeground(new java.awt.Color(255, 255, 255));
        jtxt_fm.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxt_fm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtxt_fmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(lb_arestasAGM1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(lb_estrutura))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lb_arquivo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jtxt_arquivo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(lb_title))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(lb_selecionar_arquvio_entrada)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btn_selecionar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(lb_selecionar_algoritmo1)
                                                .addGap(18, 18, 18)
                                                .addComponent(cbx_estrutura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btn_carregar_grafo)))
                                        .addGap(18, 18, 18)
                                        .addComponent(lb_selecionar_algoritmo)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cbx_algoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btn_executar_algoritmo))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lb_fm)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jtxt_fm, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 474, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lb_finalizacao)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(26, 26, 26)
                                        .addComponent(lb_finalizacao1)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1252, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lb_vertices)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lb_descoberta)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1252, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lb_arquivo)
                            .addComponent(jtxt_arquivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lb_title)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lb_fm)
                        .addComponent(jtxt_fm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_selecionar_arquvio_entrada)
                    .addComponent(btn_selecionar)
                    .addComponent(btn_carregar_grafo)
                    .addComponent(lb_selecionar_algoritmo)
                    .addComponent(cbx_algoritmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_executar_algoritmo)
                    .addComponent(lb_selecionar_algoritmo1)
                    .addComponent(cbx_estrutura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lb_arestasAGM1)
                    .addComponent(lb_estrutura))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_vertices)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lb_descoberta)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lb_finalizacao)
                        .addGap(28, 28, 28)
                        .addComponent(lb_finalizacao1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_selecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_selecionarActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Selecionar Arquivo");
         // Define o diretório inicial
        File diretorioInicial = new File("C:\\Users\\thiag\\OneDrive\\Documentos\\NetBeansProjects\\TrabalhoGrafos\\src\\trabalhografos\\arquivosEntrada");
        fileChooser.setCurrentDirectory(diretorioInicial);
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Arquivo", "txt");
        
        fileChooser.setFileFilter(filter);
        int retorno = fileChooser.showOpenDialog(this);
        
        if(retorno == JFileChooser.APPROVE_OPTION){
            
            File file = fileChooser.getSelectedFile();
            jtxt_arquivo.setText(file.getName());
            
            path = file.getPath();
        } 
    }//GEN-LAST:event_btn_selecionarActionPerformed

    private void btn_carregar_grafoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_carregar_grafoActionPerformed
        TipoDeRepresentacao t;
        if(cbx_estrutura.getSelectedItem() == "Matriz Adjacência"){
            t = TipoDeRepresentacao.MATRIZ_DE_ADJACENCIA;
        }else if(cbx_estrutura.getSelectedItem() == "Matriz Incidência"){
            t = TipoDeRepresentacao.MATRIZ_DE_INCIDENCIA;
        }else{
            t = TipoDeRepresentacao.LISTA_DE_ADJACENCIA;
        }

        meusAlgoritmosEmGrafos = new MeusAlgoritmosEmGrafos();
        grafo =  meusAlgoritmosEmGrafos.carregarGrafo(path, t);
        
        for(int i=0; i<16; i++){
            for(int j=0; j<16; j++){
                jtb_estrutura.setValueAt("", i, j);
            }
        }
        for(int j=0; j<20; j++){
            jtb_vertices.setValueAt("", 0, j);
        }
        
        for(int i=0; i<20; i++){
            for(int j=0; j<5; j++){
                jtb_arestas.setValueAt("", i, j);
            }
        }
        for(int j=0; j<20; j++){
                jtb_descoberta.setValueAt("", 0, j);
                jtb_finalizacao.setValueAt("", 0, j);
                jtb_pai.setValueAt("", 0, j);
        }
        jtxt_fm.setText("");
        
        for (int i = 0; i < grafo.numeroDeVertices(); i++) {
            jtb_estrutura.setValueAt(i, i,0);
            jtb_vertices.setValueAt(i, 0, i);
        }
        if(grafo.numeroDeArestas() < 16 && grafo.numeroDeVertices() < 16){
            if(cbx_estrutura.getSelectedItem() == "Matriz Adjacência"){
                for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                    for (int j = 0; j < grafo.numeroDeVertices(); j++) {
                        if(grafo.matrizAdjacencia[i][j].get(0) == Integer.MAX_VALUE){
                            jtb_estrutura.setValueAt("Inf", i,j+1);
                        }else{
                            jtb_estrutura.setValueAt(grafo.matrizAdjacencia[i][j], i,j+1);
                        }
                    }
                }

            }else if(cbx_estrutura.getSelectedItem() == "Matriz Incidência"){
                for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                    for (int j = 0; j < grafo.numeroDeArestas(); j++) {
                        if(grafo.matrizIncidencia[i][j] == Integer.MAX_VALUE){
                            jtb_estrutura.setValueAt("Inf", i,j+1);
                        }else{
                            jtb_estrutura.setValueAt(grafo.matrizIncidencia[i][j], i,j+1);
                        }
                    }
                }
            }else{
                for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                    for (int j = 0; j < grafo.listaAdjacencia.get(i).size(); j++){
                        jtb_estrutura.setValueAt(grafo.listaAdjacencia.get(i).get(j), i,j+1);
                    }
                }
            }
        }
    }//GEN-LAST:event_btn_carregar_grafoActionPerformed

    private void btn_executar_algoritmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_executar_algoritmoActionPerformed
        for(int i=0; i<20; i++){
            for(int j=0; j<5; j++){
                jtb_arestas.setValueAt("", i, j);
            }
        }
        for(int j=0; j<20; j++){
                jtb_descoberta.setValueAt("", 0, j);
                jtb_finalizacao.setValueAt("", 0, j);
                jtb_pai.setValueAt("", 0, j);
        }
        jtxt_fm.setText("");
        
        if(cbx_algoritmo.getSelectedItem() == "Busca em Profundidade"){
            ArrayList<Aresta> resultado = new ArrayList<>(meusAlgoritmosEmGrafos.buscaEmProfundidade(grafo, grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de origem: ")))));
            
            for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                jtb_descoberta.setValueAt(meusAlgoritmosEmGrafos.d[i], 0, i);
                jtb_finalizacao.setValueAt(meusAlgoritmosEmGrafos.f[i], 0, i);
                if(meusAlgoritmosEmGrafos.pai[i] == null){
                    jtb_pai.setValueAt("null", 0, i);
                }else{
                    jtb_pai.setValueAt(meusAlgoritmosEmGrafos.pai[i].id(), 0, i);
                }
            }
            
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(i, i, 0);
            }
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(resultado.get(i).origem().id(), i, 1);
                jtb_arestas.setValueAt(resultado.get(i).destino().id(), i, 2);
                jtb_arestas.setValueAt(Double.valueOf(resultado.get(i).peso()), i, 3);
                jtb_arestas.setValueAt(resultado.get(i).getTipo(), i, 4);
            }
            
            
        }else if(cbx_algoritmo.getSelectedItem() == "Busca em Largura"){
        
            try {
                meusAlgoritmosEmGrafos.buscaEmLargura(grafo, grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de origem: "))));
            } catch (Exception ex) {
                Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                jtb_descoberta.setValueAt(meusAlgoritmosEmGrafos.d[i], 0, i);
                if(meusAlgoritmosEmGrafos.pai[i] == null){
                    jtb_pai.setValueAt("null", 0, i);
                }else{
                    jtb_pai.setValueAt(meusAlgoritmosEmGrafos.pai[i].id(), 0, i);
                }
            }
            
        }else if(cbx_algoritmo.getSelectedItem() == "Árvore Geradora Mínima"){
        
            ArrayList<Aresta> resultado = new ArrayList<>(meusAlgoritmosEmGrafos.agmUsandoKruskall(grafo));
            
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(i, i, 0);
            }
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(resultado.get(i).origem().id(), i, 1);
                jtb_arestas.setValueAt(resultado.get(i).destino().id(), i, 2);
                jtb_arestas.setValueAt(Double.valueOf(resultado.get(i).peso()), i, 3);
                jtb_arestas.setValueAt(resultado.get(i).getTipo(), i, 4);
            }
            
        }else if(cbx_algoritmo.getSelectedItem() == "Caminho Mínimo"){
        
            ArrayList<Aresta> resultado = new ArrayList<>();
            try {
                resultado = new ArrayList<>(meusAlgoritmosEmGrafos.menorCaminho(grafo, grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de origem: "))), grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de destino: ")))));
            } catch (Exception ex) {
                Logger.getLogger(Ui.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            for (int i = 0; i < grafo.numeroDeVertices(); i++) {
                if(meusAlgoritmosEmGrafos.d[i] == Integer.MAX_VALUE){
                    jtb_descoberta.setValueAt("-", 0, i);
                }else{
                    jtb_descoberta.setValueAt(meusAlgoritmosEmGrafos.d[i], 0, i);
                }
                if(meusAlgoritmosEmGrafos.pai[i] == null){
                    jtb_pai.setValueAt("null", 0, i);
                }else{
                    jtb_pai.setValueAt(meusAlgoritmosEmGrafos.pai[i].id(), 0, i);
                }
            }
            
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(i, i, 0);
            }
            for(int i = 0; i < resultado.size(); i++){
                jtb_arestas.setValueAt(resultado.get(i).origem().id(), i, 1);
                jtb_arestas.setValueAt(resultado.get(i).destino().id(), i, 2);
                jtb_arestas.setValueAt(Double.valueOf(resultado.get(i).peso()), i, 3);
                jtb_arestas.setValueAt(resultado.get(i).getTipo(), i, 4);
            }
            
        }else{
            jtxt_fm.setText(String.valueOf(meusAlgoritmosEmGrafos.fluxoMaximo(grafo, grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de origem: "))), grafo.buscaVertice(Integer.parseInt(JOptionPane.showInputDialog(this, "Digite um valor para vertice de destino: "))))));
        }
        
    }//GEN-LAST:event_btn_executar_algoritmoActionPerformed

    private void jtxt_arquivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxt_arquivoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxt_arquivoActionPerformed

    private void jtxt_fmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtxt_fmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtxt_fmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_carregar_grafo;
    private javax.swing.JButton btn_executar_algoritmo;
    private javax.swing.JButton btn_selecionar;
    private javax.swing.JComboBox<String> cbx_algoritmo;
    private javax.swing.JComboBox<String> cbx_estrutura;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jtb_arestas;
    private javax.swing.JTable jtb_descoberta;
    private javax.swing.JTable jtb_estrutura;
    private javax.swing.JTable jtb_finalizacao;
    private javax.swing.JTable jtb_pai;
    private javax.swing.JTable jtb_vertices;
    private javax.swing.JTextField jtxt_arquivo;
    private javax.swing.JTextField jtxt_fm;
    private javax.swing.JLabel lb_arestasAGM1;
    private javax.swing.JLabel lb_arquivo;
    private javax.swing.JLabel lb_descoberta;
    private javax.swing.JLabel lb_estrutura;
    private javax.swing.JLabel lb_finalizacao;
    private javax.swing.JLabel lb_finalizacao1;
    private javax.swing.JLabel lb_fm;
    private javax.swing.JLabel lb_selecionar_algoritmo;
    private javax.swing.JLabel lb_selecionar_algoritmo1;
    private javax.swing.JLabel lb_selecionar_arquvio_entrada;
    private javax.swing.JLabel lb_title;
    private javax.swing.JLabel lb_vertices;
    // End of variables declaration//GEN-END:variables
}
